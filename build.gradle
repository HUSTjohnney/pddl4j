buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
    configurations.all {
        resolutionStrategy.force 'net.java.dev.javacc:javacc:6.1.2'
    }
}


plugins {
    id "ca.coglinc.javacc" version "2.4.0"
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'java'
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'com.github.johnrengelman.shadow'

group 'fr.uga'
version '4.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
    testImplementation group: 'junit', name: 'junit', version: '4.13'
//    testImplementation 'junit:junit:4.13'
}


compileJavacc {
    arguments = [debug_parser: 'false'] // debug true to print the lexical tree
    inputDirectory = file('src/main/java/fr/uga/pddl4j/parser/lexer/')
    outputDirectory = file('src/main/java/fr/uga/pddl4j/parser/lexer/')
}

jjdoc {
    inputDirectory = file('src/main/java/fr/uga/pddl4j/parser/lexer/')
    outputDirectory = file('build/docs/PDDL4J_BNF')
    arguments = [TEXT: 'false', ONE_TABLE: 'true']

}

// The following annotation processors were detected on the compile classpath:
// 'org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor'.
// Remove warning about log4j ProcessPlugin raised with --warning-mode=all
compileJava {
    options.compilerArgs += '-proc:none'
}

compileTestJava {
    options.compilerArgs += '-proc:none'
}

checkstyle {
    toolVersion = "8.9"
}

jar {
    manifest {
        attributes 'Implementation-Title': 'PDDL4J',
                'Implementation-Version': archiveVersion,
                'Built-By': 'Damien Pellier',
                'Main-Class': 'fr.uga.pddl4j.planners.PlannerConfiguration'
    }
}

shadowJar {
    archiveBaseName.set('pddl4j')
    archiveVersion.set('4.0')
    manifest {
        attributes 'Implementation-Title': 'PDDL4J',
                'Implementation-Version': archiveVersion,
                'Built-By': 'Damien Pellier',
                "Multi-Release": true,
                'Main-Class': 'fr.uga.pddl4j.planners.PlannerConfiguration'

    }
}

task run (type: JavaExec, dependsOn: build){
    if (project.hasProperty("Args")) {
        println("arguments list : " + Args)
        args(Args.split(','))
    }

    jvmArgs = ["-javaagent:"+project.buildDir.name+"/libs/"+project.name+"-"+project.version+".jar", "-server", "-Xms2048m", "-Xmx2048m"]

    main = "fr.uga.pddl4j.planners.PlannerConfiguration"
    classpath = sourceSets.main.runtimeClasspath
}

clean{
    delete 'build', 'out', fileTree(dir: "src/main/java/fr/uga/pddl4j/parser/lexer", exclude:"Lexer.jj")
}

javadoc {
    failOnError false
    title = "PDDL4J API Documentation"
    options.setOverview("src/overview.html")
    options.setWindowTitle("PDDL4J API Documentation");
    options.showFromProtected()
    excludeLexer(javadoc)
    include("**/*.java")
}


checkstyleMain.onlyIf() { !project.hasProperty('noCheckStyle') }

checkstyleMain.doFirst() {
    excludeLexer(checkstyleMain)
}

checkstyleMain.doLast() {
    printCheckstyleVersion()
}

checkstyleTest.onlyIf() { !project.hasProperty('noCheckStyle') }

checkstyleTest.doFirst(){
    excludeLexer(checkstyleTest)
}

checkstyleTest.doLast(){
    printCheckstyleVersion()
}

test.onlyIf() { !project.hasProperty('noTest') }

test {
    useJUnit()
    // set heap size for the test JVM(s)
    minHeapSize = "512m"
    maxHeapSize = "2048m"
    forkEvery = 1 // One new JVM for each test

    testLogging {
        showStandardStreams = true // Set to false to hid test output
        exceptionFormat "full" // full to print stack
        events "skipped", "failed", "passed"
    }

    // The set of Junit tests
    scanForTestClasses = false
    //includes = ['**/PDDLParserTest.class']
    //includes = ['**/HDDLParserTest.class']
    //includes = ['**/ADLProblemInstantiationTest.class']
    //includes = ['**/HTNProblemInstantiationTest.class']
    //includes = ['**/TemporalProblemInstantiationTest.class']
    //includes = ['**/HSPTest.class']
    includes = ['**/FFTest.class']

    //includes = ['**/ParserTest.class', '**/EncoderTest.class', '**/HSPTest.class', '**/FFTest.class']
    //includes = ['**/TFDPlannerTest.class']
    //includes = ['**/TemporalInstantiationTest.class']

}

defaultTasks 'clean', 'build', 'test'

// Exclude lexer source form task
def excludeLexer(task) {
    task.exclude("**/lexer/**")
}

// Display the current version use by checkstyle plugin
def printCheckstyleVersion(){
    println("Checkstyle version: "+checkstyle.toolVersion)
}


